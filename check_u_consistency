#!/usr/bin/python3
# ~/dev/py/upax/check_u_consistency

""" Perform a upax consistency check. """

import os
import sys
import time
from argparse import ArgumentParser

from optionz import dump_options
from xlattice import (
    check_hashtype, parse_hashtype_etc, fix_hashtype,
    check_u_path)
from upax import __version__, __version_date__
import upax.consistency


def die_if_not_found(path):
    """ Stop the program if the file does not exist. """
    if not os.path.exists(path):
        print("cannot continue: %s does not exist" % path)
        sys.exit(1)


def main():
    """
    Collects options for upax.consistency.check.

    If the --repair argument is present, will locate any content files in U
    that are not in the log (U/L) and add them with the int time of the
    run as the timestamp, U/nodeID as the nodeID, this program as the
    source, and the content key as the path.  By default the program
    assumes that we are using SHA1 to calculate content keys.

    In this implementation no attempt is made to verify that the
    content key accurately reflects what is in the file.
    """

    # -- program defaults -------------------------------------------
    limit = 1024 * 1024 * 1024  # maximum number of files in U processed
    u_path = '/var/U'           # root of the U256x256 directory structure

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser()

    parser.add_argument('-a', '--start_at', default='00',
                        help='start at, default = 00')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show args and exit')

    parser.add_argument('-k', '--just_keys', action='store_true',
                        help='just collect keys, do not check they are valid content keys')

    parser.add_argument('-L', '--limit', default=limit, type=int,
                        help='collect up to this many keys, default = %u' % limit)

    parser.add_argument('-R', '--repairing', action='store_true',
                        help='try to fix errors found (for now, insert missing userBodies into U0)')

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run, use default local dirs')

    parser.add_argument('-V', '--show_version', action='store_true',
                        help='show version number and date')

    parse_hashtype_etc(parser)
    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    fix_hashtype(args)
    args.timestamp = int(time.time())
    if args.testing:
        args.u_path = 'myU'
        if not os.path.exists(args.u_path):
            os.makedirs(args.u_path)
    if args.u_path:
        die_if_not_found(args.u_path)

    # -- sanity checks ----------------------------------------------
    check_hashtype(args.hashtype)
    check_u_path(parser, args, must_exist=True)
    args.myNodeID = None
    path_to_node_id = os.path.join(u_path, 'node_id')
    if os.path.exists(path_to_node_id):
        with open(path_to_node_id, 'r') as file:
            args.myNodeID = file.read().strip()
        # DEBUG
        print("MY NODE_ID IS %s" % args.myNodeID)
        # END
    # start_at must be a string of two hex characters
    hex_char = '0123456789abcdef'
    start_at = args.start_at = args.start_at.lower()
    if not isinstance(start_at, str) or len(start_at) != 2\
            or not start_at[0] in hex_char or not start_at[1] in hex_char:
        print("start_at must be two hex digits; '%s' isn't" % args.start_at)

    # -- do it ------------------------------------------------------
    args.app_name = 'check_u_consistency v%s' % __version__
    if args.verbose or args.show_version or args.just_show:
        print("%s %s" % (args.app_name, __version_date__))

    if args.verbose or args.just_show:
        print(dump_options(args))

    if not args.just_show:
        upax.consistency.check(args)

if __name__ == '__main__':
    main()
