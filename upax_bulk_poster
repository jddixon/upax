#!/usr/bin/python3

# ~/dev/py/upax/upaxBulkPoster

import os
import re
import sys
import time
from argparse import ArgumentParser

import u
import upax
from xlattice import (QQQ, check_using_sha,
                      parseUsingSHA, fix_using_sha, show_using_sha, check_u_path)

# PATs AND REs ######################################################


def do_whatever(args):
    no_changes = args.no_changes
    u_dir = args.u_dir
    using_sha = args.using_sha
    verbose = args.verbose
    string = upax.BlockingServer(u_dir, using_sha)
    log = string.log
    if verbose:
        print("there were %7u files in %s at the beginning of the run" % (
            len(log), u_dir))

    src = args.pgm_name_and_version

    files = os.listdir(args.inDir)
    for file in files:
        path_to_file = os.path.join(args.inDir, file)
        if using_sha == QQQ.USING_SHA1:
            hash = u.fileSHA1(path_to_file)
        if no_changes:
            if verbose:
                print('would add %s %s' % (hash, path_to_file))
        else:
            string.put(path_to_file, hash, src)

    if verbose:
        print("there are %7u files in %s at the end of the run" % (
            len(log), u_dir))
    string.close()


def main():

    pgm_name_and_version = "upaxBulkPoster v%s %s" % (
        upax.__version__, upax.__version_date__)
    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser('post new files in a directory into Upax')

    parser.add_argument('-e', '--ec2Host', action='store_true',
                        help='set if machine is in EC2')

    parser.add_argument('-i', '--inDir', default='NO_SUCH_DIRECTORY',
                        help='path to input directory (forced to ./ testIn if testing)')

    parser.add_argument('-H', '--hostmaster', action='store_true',
                        help='set if machine runs bindMgr')

    parser.add_argument('-j', '--justShow', action='store_true',
                        help='show args and exit')

    parser.add_argument('-N', '--nameserver', action='store_true',
                        help='set if machine is a name server and so runs bindLocalMgr')

    parser.add_argument('-t', '--showTimestamp', action='store_true',
                        help='show run timestamp')

    # -u/--uDir just the base name (usually Upax or Upax0); fixed up below

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run - write to ./testU')

    parser.add_argument('-V', '--showVersion', action='store_true',
                        help='show version number and date')

    parser.add_argument('-z', '--noChanges', action='store_true',
                        help="don't actually write anything to disk")

    # -1,-2,-3, usingSHA, -v/--verbose
    parseUsingSHA(parser)

    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    fix_using_sha(args)

    args.pgm_name_and_version = pgm_name_and_version
    if args.testing:
        args.inDir = 'testIn'
    args.timestamp = timestamp

    # -- sanity checks ----------------------------------------------
    check_using_sha(args.using_sha)
    if not os.path.exists(args.inDir):
        print("input directory '%s' does not exist" % args.inDir)
        sys.exit(1)

    # REMOVING THIS RESTRICTION #################
#   uDirParts = args.uDir.split('/')
#   if len(uDirParts) > 1:
#       print "uDir may not contain any slashes: aborting"
#       sys.exit(1)

    if args.hostmaster and args.nameserver:
        print('you cannot select both hostmaster and nameserver attributes')
        sys.exit(1)

    # fixups --------------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    if args.u_dir and args.u_dir[-1] == '/':
        args.u_dir = args.u_dir[:-1]          # drop any trailing slash

    if args.testing:
        args.u_dir = 'testU'
    elif args.ec2Host:
        args.u_dir = os.path.join('/vol', args.u_dir)
    else:
        args.u_dir = os.path.join('/var', args.u_dir)

    # -- do it ------------------------------------------------------
    if args.verbose or args.showVersion or args.justShow:
        print(args.pgm_name_and_version)
    if args.showTimestamp:
        print('run at %s GMT' % timestamp)   # could be prettier
    else:
        print()                               # there's a comma up there

    if args.justShow or args.verbose:
        print('hostmaster       = ' + str(args.hostmaster))
        print('inDir            = ' + str(args.inDir))
        print('justShow         = ' + str(args.justShow))
        print('nameserver       = ' + str(args.nameserver))
        print('noChanges        = ' + str(args.no_changes))
        print('showTimestamp    = ' + str(args.showTimestamp))
        print('showVersion      = ' + str(args.showVersion))
        print('testing          = ' + str(args.testing))
        print('timestamp        = ' + str(args.timestamp))
        # usingSHA, uDir, verbose
        showUsing(parser, args)

    if not args.justShow:
        lock = u.ULock(args.u_dir)
        try:
            if lock.get_lock():
                do_whatever(args)
            else:
                print('could not get lock on %s' % args.u_dir)
        finally:
            lock.release_lock()

if __name__ == '__main__':
    main()
