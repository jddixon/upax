#!/usr/bin/python3
# ~/dev/py/upax/upax_bulk_poster

""" Copy files in selected directory into the content-keyed store. """

import sys
import time
from argparse import ArgumentParser

import os
try:
    from os.scandir import scandir
except ImportError:
    from scandir import scandir

from upax import __version__, __version_date__
from upax.server import BlockingServer

from xlattice import (HashTypes, u, check_hashtype, check_u_path,
                      parse_hashtype_etc, fix_hashtype, show_hashtype_etc)


def do_whatever(args):
    """ Given selected options, carry out the bulk posting.  """

    no_changes = args.no_changes
    u_path = args.u_path
    hashtype = args.hashtype
    verbose = args.verbose
    server = BlockingServer(u_path, hashtype)
    log = server.log
    if verbose:
        print("there were %7u files in %s at the beginning of the run" % (
            len(log), u_path))

    src = args.app_name

    for entry in scandir(args.in_dir):
        # pylint: disable=redefined-variable-type
        if hashtype == HashTypes.SHA1:
            hash_ = u.file_sha1hex(entry.path)
        elif hashtype == HashTypes.SHA2:
            hash_ = u.file_sha2hex(entry.path)
        elif hashtype == HashTypes.SHA3:
            hash_ = u.file_sha3hex(entry.path)
        if no_changes:
            if verbose:
                print('would add %s %s' % (hash_, entry.path))
        else:
            server.put(entry.path, hash_, src)

    if verbose:
        print("there are %7u files in %s at the end of the run" % (
            len(log), u_path))
    server.close()


def get_args():
    """
    Parse the command line.

    Return (parser, args), where args is a simple Namespace.
    """

    # defaults and such ---------------------------------------------

    app_name = "upax_bulk_poster v%s %s" % (__version__, __version_date__)
    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- check for config file --------------------------------------

    # XXX STUB

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser('post new files in a directory into Upax')

    parser.add_argument('-e', '--ec2host', action='store_true',
                        help='set if machine is in EC2')

    parser.add_argument('-i', '--in_dir', default='NO_SUCH_DIRECTORY',
                        help='path to input directory (forced to ./ testIn if testing)')

    parser.add_argument('-H', '--hostmaster', action='store_true',
                        help='set if machine runs bindMgr')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show args and exit')

    parser.add_argument('-N', '--nameserver', action='store_true',
                        help='set if machine is a name server and so runs bindLocalMgr')

    parser.add_argument('-t', '--show_timestamp', action='store_true',
                        help='show run timestamp')

    # -u/--u_path just the base name (usually Upax or Upax0); fixed up below

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run - write to ./testU')

    parser.add_argument('-V', '--show_version', action='store_true',
                        help='show version number and date')

    parser.add_argument('-z', '--no_changes', action='store_true',
                        help="don't actually write anything to disk")

    # -1,-2,-3, hashtype, -v/--verbose
    parse_hashtype_etc(parser)

    args = parser.parse_args()      # a Namespace object
    if args.show_version:
        print(args.app_name)
        sys.exit(0)

    args.app_name = app_name
    args.timestamp = timestamp
    return parser, args


def check_args(parser, args):
    """ Check and sometimes modify the interpreted command line arguments. """

    # -- fixups -----------------------------------------------------
    fix_hashtype(args)

    if args.testing:
        args.in_dir = 'testIn'

    # -- sanity checks ----------------------------------------------
    if not args.just_show:
        check_hashtype(args.hashtype)
        if not os.path.exists(args.in_dir):
            print("input directory '%s' does not exist" % args.in_dir)
            sys.exit(1)

        if args.hostmaster and args.nameserver:
            print('you cannot select both hostmaster and nameserver attributes')
            sys.exit(1)

    # fixups --------------------------------------------------------
    if args.u_path and args.u_path[-1] == '/':
        args.u_path = args.u_path[:-1]          # drop any trailing slash

    if args.testing:
        args.u_path = 'testU'
        os.makedirs(args.u_path)

    # fixups must lead to sanity
    if not args.just_show:
        check_u_path(parser, args, must_exist=True)


def show_args(args):
    """ Optionally display option values. """

    if args.verbose or args.just_show:
        print(args.app_name)
    if args.show_timestamp:
        print('run at %s GMT' % args.timestamp)     # could be prettier
    else:
        print()                               # there's a comma up there

    if args.just_show or args.verbose:
        print('ec2host          = ' + str(args.ec2host))
        print('hostmaster       = ' + str(args.hostmaster))
        print('in_dir           = ' + str(args.in_dir))
        print('just_show        = ' + str(args.just_show))
        print('nameserver       = ' + str(args.nameserver))
        print('no_changes       = ' + str(args.no_changes))
        print('show_timestamp   = ' + str(args.show_timestamp))
        print('testing          = ' + str(args.testing))
        print('timestamp        = ' + str(args.timestamp))
        # hashtype, u_path, verbose
        show_hashtype_etc(args)


def main():
    """ Parse, check, and show command line args; run the app. """

    parser, args = get_args()
    check_args(parser, args)
    show_args(args)

    if not args.just_show:
        lock = u.ULock(args.u_path)
        try:
            if lock.get_lock():
                do_whatever(args)
            else:
                print('could not get lock on %s' % args.u_path)
        finally:
            lock.release_lock()

if __name__ == '__main__':
    main()
