#!/usr/bin/python3

# ~/dev/py/upax/upax_update_node_id

import os
import pwd
import sys
import time

from argparse import ArgumentParser

import upax
from xlattice import (u, QQQ, check_using_sha,
                      parse_using_sha, fix_using_sha, show_using_sha)

# PATs AND REs ######################################################


def do_whatever(args):
    no_changes = args.no_changes
    testing = args.testing
    u_dir = args.u_dir
    using_sha = args.using_sha
    verbose = args.verbose

    server = upax.BlockingServer(u_dir, using_sha)
    log = server.log
    if verbose:
        print("there were %7u files in %s at the beginning of the run" % (
            len(log), u_dir))

    src = args.pgm_name_and_version

    if testing:
        login = pwd.getpwuid(os.getuid())[0]
    else:
        login = 'upax'
    pubkey_path = '/home/%s/.ssh/id_rsa.pub' % login
    if not os.path.exists(pubkey_path):
        print("can't find public key for %s" % login)
        server.close()
        return

    if using_sha == QQQ.USING_SHA1:
        node_id = u.file_sha1hex(pubkey_path)
    elif using_sha == QQQ.USING_SHA2:
        node_id = u.file_sha2hex(pubkey_path)
    elif using_sha == QQQ.USING_SHA3:
        node_id = u.file_sha3hex(pubkey_path)
    if verbose:
        print("nodeID: " + node_id)

    path_to_node_id = os.path.join(u_dir, 'node_id')
    if os.path.exists(path_to_node_id):
        with open(path_to_node_id, 'r') as file:
            current_node_id = file.read()[:-1]
        if current_node_id == node_id:
            if verbose:
                print('nodeID in %s is already correct' % u_dir)
                server.close()
                return
    with open(path_to_node_id, 'w') as file:
        file.write(node_id + '\n')
        os.chmod(path_to_node_id, 0o444)
    server.put(pubkey_path, node_id, src)

    if verbose:
        print("there are %7u files in %s at the end of the run" % (
            len(log), u_dir))
    server.close()


def main():

    pgm_name_and_version = "upax_update_node_id v%s %s" % (
        upax.__version__, upax.__version_date__)
    timestamp = "%04d%02d%02d-%02d%02d%02d" % time.gmtime()[:6]

    # -- program defaults -------------------------------------------

    # -- check for config file --------------------------------------

    # -- parse the command line -------------------------------------
    # see docs.python.org/library/argparse.html
    parser = ArgumentParser('post new files in a directory into Upax')

    parser.add_argument('-e', '--ec2host', action='store_true',
                        help='set if machine is in EC2')

    parser.add_argument('-i', '--in_dir', default='/home/upax/.ssh',
                        help='path to .ssh/ (forced to ./ testIn if testing)')

    parser.add_argument('-H', '--hostmaster', action='store_true',
                        help='set if machine runs bindMgr')

    parser.add_argument('-j', '--just_show', action='store_true',
                        help='show args and exit')

    parser.add_argument('-N', '--nameserver', action='store_true',
                        help='set if machine is a name server and so runs bindLocalMgr')

    parser.add_argument('-t', '--show_timestamp', action='store_true',
                        help='show run timestamp')

    # -u/--uDir just the base name (usually Upax or Upax0), fixed up below

    parser.add_argument('-T', '--testing', action='store_true',
                        help='test run - write to ./testU')

    parser.add_argument('-V', '--show_version', action='store_true',
                        help='show version number and date')

    parser.add_argument('-z', '--no_changes', action='store_true',
                        help="don't actually write anything to disk")

    # -1,-2,-3, usingSHA, -v/--verbose
    parse_using_sha(parser)

    args = parser.parse_args()      # a Namespace object

    # -- fixups -----------------------------------------------------
    fix_using_sha(args)
    args.pgm_name_and_version = pgm_name_and_version
    if args.testing:
        args.in_dir = 'testIn'
    args.timestamp = timestamp

    # -- sanity checks ----------------------------------------------
    check_using_sha(args.using_sha)
    if not os.path.exists(args.in_dir):
        print("input directory '%s' does not exist" % args.in_dir)
        sys.exit(1)

    # REMOVING THIS RESTRICTION #################
#   uDirParts = args.uDir.split('/')
#   if len(uDirParts) > 1:
#       print "uDir may not contain any slashes: aborting"
#       sys.exit(1)

    if args.hostmaster and args.nameserver:
        print('you cannot select both hostmaster and nameserver attributes')
        sys.exit(1)

    # fixups --------------------------------------------------------
    args.pgm_name_and_version = pgm_name_and_version
    if args.u_dir and args.u_dir[-1] == '/':
        args.u_dir = args.u_dir[:-1]          # drop any trailing slash

    if args.testing:
        args.u_dir = 'testU'
    elif args.ec2_host:
        args.u_dir = os.path.join('/vol', args.u_dir)
    else:
        args.u_dir = os.path.join('/var', args.u_dir)

    # -- do it ------------------------------------------------------
    if args.verbose or args.show_version or args.just_show:
        print(args.pgm_name_and_version)
    if args.show_timestamp:
        print('run at %s GMT' % timestamp)   # could be prettier
    else:
        print()                               # there's a comma up there

    if args.just_show or args.verbose:
        print('ec2host       = ' + str(args.ec2host))
        print('hostmaster       = ' + str(args.hostmaster))
        print('in_dir           = ' + str(args.in_dir))
        print('just_show        = ' + str(args.just_show))
        print('nameserver       = ' + str(args.nameserver))
        print('no_changes       = ' + str(args.no_changes))
        print('show_timestamp   = ' + str(args.show_timestamp))
        print('show_version     = ' + str(args.show_version))
        print('testing          = ' + str(args.testing))
        print('timestamp        = ' + str(args.timestamp))
        show_using_sha(args)

    if not args.just_show:
        lock = u.ULock(args.u_dir)
        try:
            if lock.get_lock():
                do_whatever(args)
            else:
                print('could not get lock on %s' % args.u_dir)
        finally:
            lock.release_lock()

if __name__ == '__main__':
    main()
